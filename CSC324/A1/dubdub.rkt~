#lang racket
#| * CSC324 Fall 2019: Assignment 1 * |#
#|
Module: dubdub
Description: Assignment 1: A More Featureful Interpreter
Copyright: (c)University of Toronto, University of Toronto Mississauga 
               CSC324 Principles of Programming Languages, Fall 2019

The assignment handout can be found at

    https://www.cs.toronto.edu/~lczhang/324/files/a1.pdf

Please see the assignment guidelines at 

    https://www.cs.toronto.edu/~lczhang/324/homework.html
|#

(provide run-interpreter)

(require "dubdub_errors.rkt")


;-----------------------------------------------------------------------------------------
; Main functions (skeleton provided in starter code)
;-----------------------------------------------------------------------------------------
#|
(run-interpreter prog) -> any
  prog: datum?
    A syntactically-valid Dubdub program.

  Evaluates the Dubdub program and returns its value, or raises an error if the program is
  not semantically valid.
|#
(define (run-interpreter prog)
  (cond
    [(equal? 0 (length prog)) (void)] ;no prog
    
    ;no additional bindings, only have <expr>, including cases like ((lambda (x) (+ x 1)) 1))
    [(equal? 1 (length prog)) (interpret (hash) (first prog))]
    
    [else
     ;normal prog (<binding_or_contract> ... <expr>)
     (interpret (foldl (lambda (expr env) (interpret env expr)) (hash) (take prog (- (length prog) 1))) (last prog))]
    ))



#|
(interpret env expr) -> any
  env: hash?
    The environment with which to evaluate the expression.
  expr: datum?
    A syntactically-valid Dubdub expression.

  Returns the value of the Dubdub expression under the given environment.

  Note: a function (a builtin or closure)
|#
(define (interpret env expr)
  (cond
    ;the expr is a closure, Recursion / Return new closure
    [(closure? expr)
     (if (closure-slovable env expr)
         (interpret env (closure-body expr))
         ;if expr is a closure but not all params are defined
         (closure (closure-contract expr) env (closure-params expr) (closure-body expr)))]

    ;the expr is <expr> a number, return expr
    [(number? expr) expr]

    ;the expr is <expr> a boolean, return expr
    [(boolean? expr) expr]

    [(symbol? expr)
     (if (hash-has-key? env expr) ;the expr is <expr> a symbol, return Value / Error raised
      (hash-ref env expr)
      (report-error 'unbound-name expr))] 

    ;the expr is <binding>  return new env / Error raised
    [(equal? (first expr) 'define) (env-update env (second expr) (interpret env (third expr)))]

    ;the expr is <contract>, return new env
    [(equal? (first expr) 'define-contract) (env-update env (second expr) (closure (third expr) env (list) (list)))]

    ;the expr is <expr> function expresssion, Return Clousre
    [(equal? (first expr) 'lambda) (closure (list) env (second expr) (third expr))]

    ;the epxr is a bulitin funciton call, Recursion  (simply apply)
    [(builtin? (first expr)) (apply (hash-ref builtins (first expr))
         (foldl (lambda (expr ls) (append ls (list (interpret env expr)))) (list) (rest expr)))]

    ;the expr is NOT A FUNCTION CALL, Error raised
    [(equal? #f (or (builtin? (first expr)) (closure? (interpret env (first expr))))) (report-error 'not-a-function (first expr))]

    ;the expr is <expr> a function call , Recursion
    [else (let ((clu (interpret env (first expr)))
          (arguments (foldl (lambda (exprsion results) (append results (list (interpret env exprsion)))) (list) (rest expr))))
            (interpret (foldl (lambda (k v environment) (env-update environment k v))
                  (closure-environment clu)
                  (take (unknown-parms (closure-environment clu) (closure-params clu)) (length arguments)) arguments) clu))]
    ))



;-----------------------------------------------------------------------------------------
; Helpers: Builtins and Closures
;-----------------------------------------------------------------------------------------
; A hash mapping symbols for Dubdub builtin functions to their corresponding Racket value.
(define builtins
  (hash
   '+ +
   'equal? equal?
   '< <
   'integer? integer?
   'boolean? boolean?
   ; Note: You'll almost certainly need to replace procedure? here to properly return #t
   ; when given your closure data structure at the end of Task 1!
   ;should return #t when called on a Dubdub function value (created with lambda) as well as a Dubdub builtin.
   'procedure? procedure?
   ))

; Returns whether a given symbol refers to a builtin Dubdub function.
(define (builtin? identifier) (hash-has-key? builtins identifier))


#|
Starter definition for a closure "struct". Racket structs behave similarly to
C structs (contain fields but no methods or encapsulation).
Read more at https://docs.racket-lang.org/guide/define-struct.html.

You can and should modify this as necessary. If you're having trouble working with
Racket structs, feel free to switch this implementation to use a list/hash instead.
|#
(struct closure (contract environment params body))

;-----------------------------------------------------------------------------------------
; Our Helpers
;-----------------------------------------------------------------------------------------

;return a new env by adding key and value.
(define (env-update env key value)
  (if (closure? value)
      ;binding a function
      (if (hash-has-key? env key)
          (hash-set env key (closure (closure-contract (hash-ref env key)) (closure-environment value) (closure-params value) (closure-body value)))
          (hash-set env key (closure (list) (closure-environment value) (closure-params value) (closure-body value))))
      ;binding a interger/boolean
      (if (hash-has-key? env key)
          (report-error 'duplicate-name key)
          (hash-set env key value)) 
      ))

;return true iff all params in closure object [clu] are defined in hashtable [env]
(define (closure-slovable env clu)
  (foldl (lambda (parm result) (and result (hash-has-key? env parm))) #t (closure-params clu)))

;return a list of params that do not have defined value in env
(define (unknown-parms env parms)
  (foldl
   (lambda (parm result)
     (if (hash-has-key? env parm);if an parameter is defined in env
         (append result (list));append an empty list to an empty list (this get returned when all params are defined)
         (append result (list parm))));otherwise get a list of all the undefined params
   (list) parms)
  )