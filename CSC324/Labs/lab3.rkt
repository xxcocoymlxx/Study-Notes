#lang racket #| CSC324 Fall 2019: Lab 3 |#

;-------------------------------------------------------------------------------
;Task 1: Representing an environment
;-------------------------------------------------------------------------------

#|
(eval-calc expr env)
  expr: A datum representing an expression generated by the
        Expanded Binary Arithmetic Expression Grammar in the handout
  env:  A hash table representing an environment.
        The keys of the hash table are symbols representing identifiers.

  You may assume that if an `expr` is an identifier, then it is present in `env`.

  Relevant documentation:
    https://docs.racket-lang.org/reference/hashtables.html
    (look up `hash-ref`)

  In Racket, the function `hash-set` takes a hash table, a new key-value pair,
  and returns a *new* hash table with all the elements in the old hash table,
  plus the new key-value pair.

|#
(define/match (eval-calc expr env)
  [((list '+ a b) _) (+ (eval-calc a env) (eval-calc b env))]
  [((list '- a b) _) (- (eval-calc a env) (eval-calc b env))]
  [((list '* a b) _) (* (eval-calc a env) (eval-calc b env))]
  [((list '/ a b) _) (/ (eval-calc a env) (eval-calc b env))]
  [((list 'if (list '= a b) c d) _) (if (equal? (eval-calc a env) (eval-calc b env)) (eval-calc c env) (eval-calc d env))]
  [((list 'if (list '> a b) c d) _) (if (> (eval-calc a env) (eval-calc b env)) (eval-calc c env) (eval-calc d env))]
  [((list 'if (list '< a b) c d) _) (if (< (eval-calc a env) (eval-calc b env)) (eval-calc c env) (eval-calc d env))]
  [(_ _) (if (number? expr) expr (hash-ref env expr))];env is an hash table, expr is the key
  )

(module+ test
  (require rackunit)
  (test-equal? "Environment lookup {a: 3}"
               (eval-calc '(+ a 1) (hash 'a 3))
               4)
  (test-equal? "Environment lookup {a: 3, b: 4}"
               (eval-calc '(+ a (if (= b 4) 10 20)) (hash 'a 3 'b 4))
               13))