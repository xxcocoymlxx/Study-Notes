Script started on Thu 17 Jan 2019 07:45:44 PM EST
yangme16@dh2020pc18:~/yangme16/t02$ [Kyangme16@dh2020pc18:~/yangme16/t02$ gdb overflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break a[Kmain
Breakpoint 1 at 0x40062e: file overflow.c, line 6.
(gdb) run
Starting program: /student/yangme16/yangme16/t02/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
(gdb) display before
1: before = {1, 0, 4196685, 0}
(gdb) display a
2: a = {0, 0, 0, 0}
(gdb) display after
3: after = {4196608, 0, 4195632, 0}
(gdb) ne[K[Knext
7	    int index = 0;
1: before = {1, 0, 4196685, 0}
2: a = {0, 0, 0, 0}
3: after = {4196608, 0, 4195632, 0}
(gdb) list
2	
3	#define SIZE 4
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
11	    int after[SIZE] = {10, 10, 10, 10};
(gdb) list
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
21	        printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
(gdb) list
22	    }
23	    printf("%lx -> &i\n", (unsigned long)&i);
24	    printf("%lx -> &index\n", (unsigned long)&index);
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) list
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) break 37
Breakpoint 2 at 0x40083b: file overflow.c, line 37.
(gdb) continue
Continuing.
Address of the variables:
7fffffffe9c0 -> &after[0]
7fffffffe9c4 -> &after[1]
7fffffffe9c8 -> &after[2]
7fffffffe9cc -> &after[3]
7fffffffe9b0 -> &a[0]
7fffffffe9b4 -> &a[1]
7fffffffe9b8 -> &a[2]
7fffffffe9bc -> &a[3]
7fffffffe9a0 -> &before[0]
7fffffffe9a4 -> &before[1]
7fffffffe9a8 -> &before[2]
7fffffffe9ac -> &before[3]
7fffffffe99c -> &i
7fffffffe998 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) net[Kxt
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe9c0
(gdb) print &(a[4])
$2 = (int *) 0x7fffffffe9c0
(gdb) quit
A debugging session is active.

	Inferior 1 [process 24305] will be killed.

Quit anyway? (y or n) y
yangme16@dh2020pc18:~/yangme16/t02$ exit
exit

Script done on Thu 17 Jan 2019 07:50:39 PM EST
